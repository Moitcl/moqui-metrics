<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<screen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/xml-screen-3.xsd"
        standalone="true" render-modes="text" require-authentication="anonymous-all" track-artifact-hit="false">
    <web-settings require-encryption="false" mime-type="text/plain"/>

    <pre-actions><script>sri.renderMode("text")</script></pre-actions>

    <actions>
        <service-call name="moqui.metrics.MetricsServices.check#Client" out-map="context" ignore-error="true" transaction="force-new" transaction-timeout="1"/>
        <if condition="!finished">
            <log message="Could not check Client"/>
        </if>
        <if condition="allowed">

            <!-- Memory -->
            <set field="memoryMXBean" from="java.lang.management.ManagementFactory.getMemoryMXBean()"/>
            <set field="heapMemoryUsage" from="memoryMXBean.getHeapMemoryUsage()"/>
            <set field="moquiMemoryHeapUsage" from="heapMemoryUsage.getUsed()" type="String"/>
            <set field="moquiMemoryHeapMax" from="heapMemoryUsage.getMax()" type="String"/>
            <if condition="!moquiMemoryHeapMax"><set field="moquiMemoryHeapMax" value="NaN"/></if>
            <set field="moquiMemoryHeapCommitted" from="heapMemoryUsage.getCommitted()" type="String"/>
            <set field="nonHeapMemoryUsage" from="memoryMXBean.getNonHeapMemoryUsage()"/>
            <set field="moquiMemoryNonHeapUsage" from="nonHeapMemoryUsage.getUsed()" type="String"/>
            <set field="moquiMemoryNonHeapMax" from="nonHeapMemoryUsage.getMax()" type="String"/>
            <if condition="!moquiMemoryNonHeapMax"><set field="moquiMemoryNonHeapMax" value="NaN"/></if>
            <set field="moquiMemoryNonHeapCommitted" from="nonHeapMemoryUsage.getCommitted()" type="String"/>

            <!-- JVM data -->
            <set field="runtimeMXBean" from="java.lang.management.ManagementFactory.getRuntimeMXBean()"/>
            <set field="moquiJvmUptime" from="(runtimeMXBean.getUptime() as BigDecimal) / 1000" type="String"/>

            <!-- OS data -->
            <set field="osMXBean" from="java.lang.management.ManagementFactory.getOperatingSystemMXBean()"/>
            <set field="moquiOsLoad" from="osMXBean.getSystemLoadAverage()" type="String"/>
            <set field="moquiOsAvailableProcessors" from="osMXBean.getAvailableProcessors()"/>
            <set field="runtimeFile" from="new File(ec.factory.runtimePath)"/>
            <set field="diskFreeRuntime" from="runtimeFile.getFreeSpace()" type="String"/>
            <set field="diskTotalRuntime" from="runtimeFile.getTotalSpace()" type="String"/>

            <!-- Garbage Collector data -->
            <set field="gcMXBeans" from="java.lang.management.ManagementFactory.getGarbageCollectorMXBeans()"/>
            <set field="gcCount" from="0"/>
            <set field="gcTime" from="0"/>
            <iterate list="gcMXBeans" entry="gcMXBean">
                <set field="gcCount" from="gcCount+gcMXBean.getCollectionCount()"/>
                <set field="gcTime" from="gcTime+gcMXBean.getCollectionTime()"/>
            </iterate>
            <set field="gcCountString" from="gcCount" type="String"/>
            <set field="gcTimeString" from="(gcTime as BigDecimal) / 1000" type="String"/>

            <set field="jitMXBean" from="java.lang.management.ManagementFactory.getCompilationMXBean()"/>
            <set field="jitCompileTime" from="(jitMXBean.getTotalCompilationTime() as BigDecimal) / 1000" type="String"/>
            <set field="classMXBean" from="java.lang.management.ManagementFactory.getClassLoadingMXBean()"/>
            <set field="jvmClassesLoaded" from="classMXBean.getLoadedClassCount()" type="String"/>
            <set field="jvmTotalClassesLoaded" from="classMXBean.getTotalLoadedClassCount()" type="String"/>
            <set field="jvmClassesUnloaded" from="classMXBean.getUnloadedClassCount()" type="String"/>
            <set field="threadMXBean" from="java.lang.management.ManagementFactory.getThreadMXBean()"/>
            <set field="jvmThreadCount" from="threadMXBean.getThreadCount()" type="String"/>
            <set field="jvmPeakThreadCount" from="threadMXBean.getPeakThreadCount()" type="String"/>
            <set field="jvmTotalStartedThreadCount" from="threadMXBean.getTotalStartedThreadCount()"/>

            <set field="cpuArch" from="osMXBean.getArch().replace('\\', '\\\\').replace('&quot;', '\\&quot;')"/>
            <set field="osName" from="osMXBean.getName().replace('\\', '\\\\').replace('&quot;', '\\&quot;')"/>
            <set field="osVersion" from="osMXBean.getVersion().replace('\\', '\\\\').replace('&quot;', '\\&quot;')"/>
            <set field="jvmSpecVersion" from="runtimeMXBean.getSpecVersion().replace('\\', '\\\\').replace('&quot;', '\\&quot;')"/>
            <set field="jvmVendor" from="runtimeMXBean.getVmVendor().replace('\\', '\\\\').replace('&quot;', '\\&quot;')"/>
            <set field="jvmVersion" from="runtimeMXBean.getVmVersion().replace('\\', '\\\\').replace('&quot;', '\\&quot;')"/>
            <set field="moquiVersion" from="ec.factory.moquiVersion.replace('\\', '\\\\').replace('&quot;', '\\&quot;')"/>

            <set field="componentInfoList" from="ec.factory.componentInfoList"/>
            <set field="runtimeVersionMap" from="ec.factory.getVersionMap()"/>
            <set field="frameworkLocation" from="new java.io.File('.').getCanonicalPath().replace('\\', '\\\\').replace('&quot;', '\\&quot;')"/>
            <if condition="componentInfoList != null"><script>
                try {
                    componentInfoList.add([name: 'framework', artifactType: 'framework', location: frameworkLocation, versionMap: runtimeVersionMap?.framework])
                    componentInfoList.add([name: 'runtime', artifactType: 'runtime', location: ec.factory.runtimePath.replace('\\', '\\\\').replace('"', '\\"'), versionMap: runtimeVersionMap?.runtime])
                } catch (NullPointerException e) {}
            </script></if>
            <set field="artifactList" from="[]"/>
            <iterate list="componentInfoList" entry="artifact">
                <if condition="artifact.versionMap">
                    <set field="uniqueVersionMap" from="[:]"/>
                    <script>
                        try {
                            artifact.versionMap.each { key, value ->
                                uniqueVersionMap[key] = value
                            }
                            artifactVersionLabels = uniqueVersionMap.collect { key, value ->
                                return "git_" + key + "=\"" + (value ? (value.replace('\\', '\\\\').replace('"', '\\"') + "\"") : "\"")
                            }.join(",")
                        } catch (NullPointerException e) {}
                    </script>
                    <set field="artifactName" from="artifact.name.replace('\\', '\\\\').replace('&quot;', '\\&quot;')"/>
                    <set field="artifactType" from="artifact.artifactType ?: 'component'"/>
                    <set field="artifactDependsOnNames" from="artifact.dependsOnNames ? artifact.dependsOnNames.join(',') : ''"/>
                    <script>
                        artifactList.add("artifact_name=\"${artifactName}\",artifactType=\"${artifactType}\",artifact_location=\"${artifact.location ?: ''}\",depends_on_names=\"${artifactDependsOnNames}\"${artifactVersionLabels ? ',' + artifactVersionLabels : ''}")
                    </script>
                </if>
            </iterate>

            <!-- Worker Pool -->
            <set field="workerPool" from="ec.factory.workerPool"/>
            <set field="workerPoolCurrent" from="workerPool.getPoolSize()" type="String"/>
            <set field="workerPoolMaxSize" from="workerPool.getMaximumPoolSize()" type="String"/>
            <set field="workerPoolActive" from="workerPool.getActiveCount()" type="String"/>
            <set field="workerPoolQueueSize" from="workerPool.queue.size()" type="String"/>
            <set field="workerPoolQueueRemainingCapacity" from="workerPool.queue.remainingCapacity()" type="String"/>

            <!-- Scheduled Executor -->
            <set field="scheduledExecutor" from="ec.factory.scheduledExecutor"/>
            <set field="scheduledPoolCurrent" from="scheduledExecutor.getPoolSize()" type="String"/>
            <set field="scheduledPoolMaxSize" from="scheduledExecutor.getMaximumPoolSize()" type="String"/>
            <set field="scheduledPoolActive" from="scheduledExecutor.getActiveCount()" type="String"/>
            <set field="scheduledPoolQueueSize" from="scheduledExecutor.queue.size()" type="String"/>
            <set field="scheduledPoolQueueRemainingCapacity" from="scheduledExecutor.queue.remainingCapacity()" type="String"/>
            <set field="jobRunner" from="ec.service.getJobRunner()"/>
            <set field="jobRunnerExecuteTotal" from="jobRunner.getExecuteCount()" type="String"/>
            <set field="jobRunnerJobRunTotal" from="jobRunner.getTotalJobsRun()" type="String"/>
            <set field="jobRunnerLastJobsActive" from="jobRunner.getLastJobsActive()" type="String"/>
            <set field="jobRunnerLastJobsPaused" from="jobRunner.getLastJobsPaused()" type="String"/>
            <set field="jobWorkerPool" from="ec.service.jobWorkerPool"/>
             <script>
                 MNode serviceFacadeNode = ec.factory.confXmlRoot.first("service-facade")
                 jobQueueMax = (serviceFacadeNode.attribute("job-queue-max") ?: "0") as int
             </script>
            <set field="jobRunnerJobsRunning" from="jobWorkerPool.getActiveCount() + jobWorkerPool.queue.size()"/>
            <set field="jobRunnerJobSlots" from="jobQueueMax + jobWorkerPool.getMaximumPoolSize()"/>

            <set field="dataSources" from="[]"/>
            <iterate list="ec.entity.getDataSourcesInfo()" entry="dataSource">
                <set field="dataSourceLabels" from="new StringBuffer()"/>
                <set field="dataSourceDetail" from="dataSource.detail"/>
                <script>
                    dataSourceLabels.append("group=\"${dataSource.group.replace('\\', '\\\\').replace('"', '\\"')}\"")
                    if (dataSource.uniqueName)
                        dataSourceLabels.append(",unique_name=\"${dataSource.uniqueName.replace('\\', '\\\\').replace('"', '\\"')}\"")
                    if (dataSource.database)
                        dataSourceLabels.append(",database=\"${dataSource.database.replace('\\', '\\\\').replace('"', '\\"')}\"")
                    if (dataSourceDetail) {
                        detailLabels = dataSourceDetail.collect { key, value ->
                            return "detail_${key}=\"" + value.replace('\\', '\\\\').replace('"', '\\"') + "\""
                        }.join(",")
                        dataSourceLabels.append("," + detailLabels)
                    }
                    dataSources.add(dataSourceLabels)
                </script>
            </iterate>

            <!-- Elastic / OpenSearch -->
            <set field="esServerInfoList" from="[]"/>
            <if condition="ec.elastic">
                <iterate list="ec.elastic.getClientList()" entry="esClient">
                    <script>
                        try {
                            esServerInfo = esClient.getServerInfo()
                            if (esServerInfo) {
                                esServerInfo.clientClusterName = esClient.getClusterName()
                                esServerInfo.clusterLocation = esClient.getClusterLocation()
                            }
                        } catch (Throwable t) {
                            ec.logger.error("Error getting info for Elastic Client", t)
                            esServerInfo = [clientClusterName: esClient.getClusterName(), clusterLocation: esClient.getClusterLocation(), name: t.toString(), cluster_name: 'ERROR']
                            esServerInfoList.add(esServerInfo.collect { key, value ->
                                if (value instanceof Map) {
                                    return value.collect { innerKey, innerValue ->
                                        return "${key}_${innerKey}=\"" + (innerValue ? (innerValue.replace('\\', '\\\\').replace('"', '\\"')) : "") + "\""
                                    }.join(",")
                                } else
                                    return "${key}=\"" + (value ? (value.replace('\\', '\\\\').replace('"', '\\"')) : "") + "\""
                            }.join(","))
                        }
                    </script>
                </iterate>
            </if>

            <set field="localAddress" from="ec.factory.getLocalhostAddress().getHostAddress()"/>

            <!-- Hazelcast -->
            <set field="hzToolFactory" from="ec.factory.getToolFactory('Hazelcast')"/>
            <set field="hazelcastInstance" from="hzToolFactory?.getInstance()"/>
            <if condition="hazelcastInstance">
                <set field="cluster" from="hazelcastInstance.getCluster()"/>
                <set field="hazelcastLabels" value="version=\&quot;${cluster.getClusterVersion()}\&quot;,status=\&quot;${cluster.getClusterState()}\&quot;"/>
                <set field="hzDciToolFactory" from="ec.factory.getToolFactory('HazelcastDciTopic')"/>
                <script>
                    hazelcastMemberLabels = cluster.getMembers().collect { member ->
                        return "address=\"${member.getAddress()}\",version=\"${member.getVersion()}\",is_local=\"${member.localMember() as String}\""
                    }
                </script>
            </if>
            <set field="hzDciToolFactory" from="ec.factory.getToolFactory('HazelcastDciTopic')"/>
            <if condition="hzDciToolFactory">
                <set field="hazelcastDciPublishedCount" from="hzDciToolFactory.getDciPublished() as String"/>
                <set field="hazelcastDciLastPublishTimestamp" from="(hzDciToolFactory.getLastPublishTime() ?: 'NaN')" type="String"/>
                <set field="hazelcastDciReceivedCount" from="hzDciToolFactory.getDciReceived()" type="String"/>
                <set field="hazelcastDciLastReceiveTimestamp" from="(hzDciToolFactory.getLastReceiveTime() ?: 'NaN')" type="String"/>

            </if>

            <set field="queryTimestamp" from="ec.user.nowTimestamp.time as String"/>

            <if condition="ec.factory.getToolFactory('Metrics')">
                <set field="hitStatString" from="ec.getTool('Metrics', null).nextValues()"/>
            </if>
            <if condition="hitStatString == null"><set field="hitStatString" value=""/></if>
        </if>

    </actions>

    <widgets>
        <section name="Metrics" condition="allowed">
            <widgets>
                <render-mode><text type="text" no-boundary-comment="true">
#HELP moqui_memory_heap_usage_bytes Amount of heap memory used, in bytes
#TYPE moqui_memory_heap_usage_bytes gauge
moqui_memory_heap_usage_bytes ${moquiMemoryHeapUsage} ${queryTimestamp}
#HELP moqui_memory_heap_max_bytes Maximum amount of heap memory in bytes that can be used for memory management. This amount of memory is not guaranteed to be available for memory management if it is greater than the amount of committed memory.
#TYPE moqui_memory_heap_max_bytes gauge
moqui_memory_heap_max_bytes ${moquiMemoryHeapMax} ${queryTimestamp}
#HELP moqui_memory_heap_committed_bytes Amount of heap memory in bytes that is committed for the Java virtual machine to use. This amount of memory is guaranteed for the Java virtual machine to use.
#TYPE moqui_memory_heap_committed_bytes gauge
moqui_memory_heap_committed_bytes ${moquiMemoryHeapCommitted} ${queryTimestamp}
#HELP moqui_memory_nonheap_usage_bytes Amount of non-heap memory used, in bytes
#TYPE moqui_memory_nonheap_usage_bytes gauge
moqui_memory_nonheap_usage_bytes ${moquiMemoryNonHeapUsage} ${queryTimestamp}
#HELP moqui_memory_nonheap_max_bytes Maximum amount of non-heap memory in bytes that can be used for memory management. This amount of memory is not guaranteed to be available for memory management if it is greater than the amount of committed memory.
#TYPE moqui_memory_nonheap_max_bytes gauge
moqui_memory_nonheap_max_bytes ${moquiMemoryNonHeapMax} ${queryTimestamp}
#HELP moqui_memory_nonheap_committed_bytes Amount of non-heap memory in bytes that is committed for the Java virtual machine to use. This amount of memory is guaranteed for the Java virtual machine to use.
#TYPE moqui_memory_nonheap_committed_bytes gauge
moqui_memory_nonheap_committed_bytes ${moquiMemoryNonHeapCommitted} ${queryTimestamp}
#HELP moqui_jvm_uptime_seconds Uptime of the Java virtual machine in seconds
#TYPE moqui_jvm_uptime_seconds counter
moqui_jvm_uptime_seconds {} ${moquiJvmUptime} ${queryTimestamp}
#HELP moqui_os_load System load average for the last minute
#TYPE moqui_os_load gauge
moqui_os_load ${moquiOsLoad} ${queryTimestamp}
#HELP moqui_os_disk_free_runtime_bytes Runtime disk free in bytes
#TYPE moqui_os_disk_free_runtime_bytes gauge
moqui_os_disk_free_runtime_bytes ${diskFreeRuntime} ${queryTimestamp}
#HELP moqui_os_disk_total_runtime_bytes Runtime disk total in bytes
#TYPE moqui_os_disk_total_runtime_bytes gauge
moqui_os_disk_total_runtime_bytes ${diskTotalRuntime} ${queryTimestamp}
#HELP moqui_os_processors_available_cores Number of processors available to the Java virtual machine
#TYPE moqui_os_processors_available_cores gauge
moqui_os_processors_available_cores ${moquiOsAvailableProcessors} ${queryTimestamp}
#HELP moqui_memory_gc_count Total number of collections that have occurred
#TYPE moqui_memory_gc_count counter
moqui_memory_gc_count ${gcCountString} ${queryTimestamp}
#HELP moqui_memory_gc_time_seconds Approximate accumulated collection elapsed time in seconds
#TYPE moqui_memory_gc_time_seconds counter
moqui_memory_gc_time_seconds ${gcTimeString} ${queryTimestamp}
#HELP moqui_memory_jit_compile_time_seconds Approximate accumulated elapsed time (in seconds) spent in compilation
#TYPE moqui_memory_jit_compile_time_seconds counter
moqui_memory_jit_compile_time_seconds ${jitCompileTime} ${queryTimestamp}
#HELP moqui_jvm_classes_loaded Number of classes that are currently loaded in the Java virtual machine
#TYPE moqui_jvm_classes_loaded gauge
moqui_jvm_classes_loaded ${jvmClassesLoaded} ${queryTimestamp}
#HELP moqui_jvm_classes_loaded_total Total number of classes that have been loaded since the Java virtual machine has started execution
#TYPE moqui_jvm_classes_loaded_total counter
moqui_jvm_classes_loaded_total ${jvmTotalClassesLoaded} ${queryTimestamp}
#HELP moqui_jvm_classes_unloaded Total number of classes unloaded since the Java virtual machine has started execution
#TYPE moqui_jvm_classes_unloaded counter
moqui_jvm_classes_unloaded ${jvmClassesUnloaded} ${queryTimestamp}
#HELP moqui_jvm_thread_count Current number of live threads including both daemon and non-daemon threads
#TYPE moqui_jvm_thread_count gauge
moqui_jvm_thread_count ${jvmThreadCount} ${queryTimestamp}
#HELP moqui_jvm_thread_count_peak Peak live thread count since the Java virtual machine started or peak was reset
#TYPE moqui_jvm_thread_count_peak counter
moqui_jvm_thread_count_peak ${jvmThreadCount} ${queryTimestamp}
#HELP moqui_jvm_thread_started_total Total number of threads created and also started since the Java virtual machine started
#TYPE moqui_jvm_thread_started_total counter
moqui_jvm_thread_started_total ${jvmTotalStartedThreadCount} ${queryTimestamp}
#HELP moqui_workerpool_current Current number of threads in the worker pool
#TYPE moqui_workerpool_current gauge
moqui_workerpool_current ${workerPoolCurrent} ${queryTimestamp}
#HELP moqui_workerpool_active Approximate number of threads that are actively executing tasks in the worker pool
#TYPE moqui_workerpool_active gauge
moqui_workerpool_active ${workerPoolActive} ${queryTimestamp}
#HELP moqui_workerpool_queue_size Number of tasks queued for worker pool
#TYPE moqui_workerpool_queue_size gauge
#HELP moqui_workerpool_max_size Maximum number of threads in the worker pool
#TYPE moqui_workerpool_max_size gauge
moqui_workerpool_max_size ${workerPoolMaxSize} ${queryTimestamp}
moqui_workerpool_queue_size ${workerPoolQueueSize} ${queryTimestamp}
#HELP moqui_workerpool_queue_remaining_capacity Number of slots available to queue tasks for worker pool
#TYPE moqui_workerpool_queue_remaining_capacity gauge
moqui_workerpool_remaining_capacity ${workerPoolQueueRemainingCapacity} ${queryTimestamp}

#HELP moqui_scheduledpool_current Current number of threads in the scheduled pool
#TYPE moqui_scheduledpool_current gauge
moqui_scheduledpool_current ${scheduledPoolCurrent} ${queryTimestamp}
#HELP moqui_scheduledpool_max_size Maximum number of threads in the scheduled pool
#TYPE moqui_scheduledpool_max_size gauge
moqui_scheduledpool_max_size ${scheduledPoolMaxSize} ${queryTimestamp}
#HELP moqui_scheduledpool_active Approximate number of threads that are actively executing tasks in the scheduled pool
#TYPE moqui_scheduledpool_active gauge
moqui_scheduledpool_active ${scheduledPoolActive} ${queryTimestamp}
#HELP moqui_scheduledpool_queue_size Number of tasks queued for scheduled pool
#TYPE moqui_scheduledpool_queue_size gauge
moqui_scheduledpool_queue_size ${scheduledPoolQueueSize} ${queryTimestamp}
#HELP moqui_scheduledpool_queue_remaining_capacity Number of slots available to queue tasks for scheduled pool
#TYPE moqui_scheduledpool_queue_remaining_capacity gauge
moqui_scheduledpool_remaining_capacity ${scheduledPoolQueueRemainingCapacity} ${queryTimestamp}

#HELP moqui_jobrunner_execute_total Total number of jobRunner executions (evaluate which jobs to run)
#TYPE moqui_jobrunner_execute_total counter
moqui_jobrunner_execute_total ${jobRunnerExecuteTotal} ${queryTimestamp}
#HELP moqui_jobrunner_run_total Total number of jobs run by JobRunner
#TYPE moqui_jobrunner_run_total counter
moqui_jobrunner_run_total ${jobRunnerJobRunTotal} ${queryTimestamp}
#HELP moqui_jobrunner_last_active Number of jobs active at last execution
#TYPE moqui_jobrunner_last_active gauge
moqui_jobrunner_last_active ${jobRunnerLastJobsActive} ${queryTimestamp}
#HELP moqui_jobrunner_last_paused Number of jobs paused at last execution
#TYPE moqui_jobrunner_last_paused gauge
moqui_jobrunner_last_paused ${jobRunnerLastJobsPaused} ${queryTimestamp}
#HELP moqui_jobrunner_jobs_running Number of Service Jobs currently running
#TYPE moqui_jobrunner_jobs_running gauge
moqui_jobrunner_jobs_running ${jobRunnerJobsRunning} ${queryTimestamp}
#HELP moqui_jobrunner_slots Number of slots available for running Service Jobs
#TYPE moqui_jobrunner_slots counter
moqui_jobrunner_slots ${jobRunnerJobSlots} ${queryTimestamp}

${hitStatString}

#HELP moqui_info General information about the moqui instance
moqui_info {moqui_version="${moquiVersion}",cpu_arch="${cpuArch}",os_name="${osName}",os_version="${osVersion}",jvm_spec_version="${jvmSpecVersion}",jvm_vendor="${jvmVendor}",jvm_version="${jvmVersion}"} 1 ${queryTimestamp}

# Artifact versions
#HELP moqui_artifact_detail Framework, runtime and component details
                </text></render-mode>
                <section-iterate name="ArtifactDetail" list="artifactList" entry="artifact">
                    <widgets><render-mode><text type="text" no-boundary-comment="true">
moqui_artifact_detail {${artifact}} 1 ${queryTimestamp}
                    </text></render-mode></widgets>
                </section-iterate>
                <render-mode><text type="text" no-boundary-comment="true">
# Data Sources
#HELP moqui_datasource_info Data Source
                </text></render-mode>
                <section-iterate name="DataSources" list="dataSources" entry="datasource">
                    <widgets><render-mode><text type="text" no-boundary-comment="true">
moqui_datasource_info {${datasource}} 1 ${queryTimestamp}
                    </text></render-mode></widgets>
                </section-iterate>
                <render-mode><text type="text" no-boundary-comment="true">
# Data Sources
#HELP moqui_elasticsearch_server_info Data Source
                </text></render-mode>
                <section-iterate name="ElasticSearch" list="esServerInfoList" entry="elasticServer">
                    <widgets><render-mode><text type="text" no-boundary-comment="true">
moqui_elasticsearch_server_info {${elasticServer}} 1 ${queryTimestamp}
                    </text></render-mode></widgets>
                </section-iterate>

                <section name="HazelcastInfo" condition="hazelcastInstance"><widgets>
                <render-mode><text type="text" no-boundary-comment="true">
#HELP moqui_hazelcast_info Hazelcast cluster info
moqui_moqui_hazelcast_info {${hazelcastLabels}} 1 ${queryTimestamp}
#HELP moqui_hazelcast_dci_published_count Dci published count
#TYPE moqui_hazelcast_dci_published_count counter
moqui_hazelcast_dci_published_count ${hazelcastDciPublishedCount} ${queryTimestamp}
#HELP moqui_hazelcast_dci_published_last_timestamp Dci last publish timestamp
#TYPE moqui_hazelcast_dci_published_last_timestamp gauge
moqui_hazelcast_dci_published_last_timestamp ${hazelcastDciLastPublishTimestamp} ${queryTimestamp}
#HELP moqui_hazelcast_dci_received_count Dci received count
#TYPE moqui_hazelcast_dci_received_count counter
moqui_hazelcast_dci_received_count ${hazelcastDciReceivedCount} ${queryTimestamp}
#HELP moqui_hazelcast_dci_received_last_timestamp Dci last receive timestamp
#TYPE moqui_hazelcast_dci_received_last_timestamp gauge
moqui_hazelcast_dci_received_last_timestamp ${hazelcastDciLastReceiveTimestamp} ${queryTimestamp}
#HELP moqui_hazelcast_member Hazelcast cluster member
                </text></render-mode>
                </widgets></section>
                <section-iterate name="HazelcastMembers" list="hazelcastMemberLabels" entry="hazelcastMemberLabel">
                    <widgets><render-mode><text type="text" no-boundary-comment="true">
moqui_hazelcast_member {${hazelcastMemberLabel}} 1 ${queryTimestamp}
                    </text></render-mode></widgets>
                </section-iterate>
            </widgets>
            <fail-widgets>
                <render-mode><text type="text" no-boundary-comment="true">
Rejecting metrics/prometheus from ${ec.web.getRequest().getRemoteAddr()}
                </text></render-mode>
            </fail-widgets>
        </section>
    </widgets>

</screen>
